// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  type        Type
  isDraft     Boolean   @map("is_draft")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  publishDate DateTime  @map("publish_date")
  tags        Tag[]
  comments    Comment[]
  likes       Like[]
  video       Video?
  text        Text?
  quote       Quote?
  photo       Photo?
  link        Link?

  @@map("posts")
}

enum Type {
  Video
  Text
  Quote
  Photo
  Link
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  post     Post[]

  @@map("tags")
}

model Video {
  postId  String    @map("post_id") @unique
  title   String
  link    String
  post    Post      @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@map("video_posts")
}

model Text {
  postId    String    @map("post_id") @unique
  title     String
  preview   String
  text      String
  post    Post      @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@map("text_posts")
}

model Quote {
  postId    String    @map("post_id") @unique
  text      String
  author    String
  post    Post      @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@map("quote_posts")
}

model Photo {
  postId    String    @map("post_id") @unique
  photo     String
  post    Post      @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@map("photo_posts")
}

model Link {
  postId        String    @map("post_id") @unique
  link          String
  description   String?
  post    Post      @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@map("link_posts")
}

model Comment {
  id          String    @id @default(uuid())
  userId      String    @map("post_id")
  postId      String    @map("user_id")
  text        String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("comments")
}

model Like {
  postId  String    @map("post_id")
  userId  String    @map("user_id")
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([postId, userId])
  @@map("likes")
}

model Subscriber {
  authorId      String    @map("author_id")
  subscriberId  String    @map("subscriber_id")

  @@id([authorId, subscriberId])
  @@map("subscribers")
}
